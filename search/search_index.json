{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the RCM Project","text":""},{"location":"#about-the-rcm","title":"About the RCM","text":"<p>Welcome to the RCM project! This is a new technology designed specifically for React components, aiming to make them more reusable and dynamic. With RCM, you can easily manage and configure React components, enabling a more flexible and scalable approach to building your applications.</p> <p>The RCM project is created from two apps working together. One app is for the business analyst and the other app is for the software developer to create React components and plugins. Once created, the plugins get uploaded into the business analyst's app, thus customizing your website.</p>"},{"location":"#projects","title":"Projects","text":"App User Type Primary User Story Completion WebsiteRCM Business Analyst Website Generation 75% WebsiteRCM Stamper React Developer Plugin Generation 0%"},{"location":"#websitercm","title":"WebsiteRCM","text":""},{"location":"#specs","title":"Specs","text":"Technology PostgresQL GraphQL Next.js socket.io LNOV API TypeScript JavaScript"},{"location":"#features","title":"Features","text":"Feature Meaning Real-time Collaboration The entire app is collaborative, so you can work together from different locations. Meeting Mode Users can group up and stay on the same page. The leader changes pages, and everyone follows. SCRUM Introducing programming SCRUM to business analysts with \"Real-time Collaboration\" + \"Meeting Mode.\" Data Warehousing Watch your app's progress, and dig into past data. Never lose your data when updating your website. Red/Green Status Circles Simplifies the learning curve. Red means you need to keep working, green means that section is ready. This feature enhances situational awareness so you can make better business decisions. Day/Night Mode An optional feature allowing users to switch between light and dark modes on the website. Customization Easily plug in your updates. User Roles Grant or deny access to specific parts of the web app. File Upload-Only User Create users who can only upload files without entering the system."},{"location":"what-is-an-rcm/","title":"What is an RCM?","text":""},{"location":"what-is-an-rcm/#rcm-compared-to-a-cms","title":"RCM compared to a CMS","text":""},{"location":"what-is-an-rcm/#what-is-a-cms","title":"What is a CMS?","text":"<p>A Content Management System (CMS) typically operates with a separate layer for JSON data and another separate layer for the React component. This separation means that the JSON data is used to populate the React component, but the component's structure remains relatively fixed. It takes two systems using react to create a website.</p> <p></p>"},{"location":"what-is-an-rcm/#the-rcm-advantage","title":"The RCM advantage","text":"<p>The React Component Manager will use only one JSON file and one React component. Your tech debt for your website is as small as it can get. The RCM is built for business includes real-time collaboration, user roles, and navigation. This allows for the website to be reusable. Instead of rebuilding a new website, you can change the components and order of the components and pages of the components.</p> <p></p>"},{"location":"what-is-an-rcm/#rcm-life-cycle","title":"RCM life cycle","text":"<p>1) A form is generated from the JSON file.  2) The user enters the data into the form.  3) The answers from the user are used as props in the React component. </p> <p> </p>"},{"location":"website-rcm-stamper/component-plugin/","title":"Component Plugins","text":"<p>This documentation is about creating a plugin in the WebsiteRCM application. This application is known as a React Component Manager, similar to a CMS (Content Management System) for React components.</p> <p>Tip: Think React.js without frameworks, so no JavaScript framework or CSS framework.</p> <p>Tip: You should modularize all CSS in each component you create.</p> <p></p>"},{"location":"website-rcm-stamper/component-plugin/#component-creation-instructions","title":"Component Creation Instructions","text":"<p>A component is built with two things working together: 1. A React component 2. A JSON file that creates the left-hand menu and the <code>props.data.user</code> object.</p> <p>Every React component you create will be injected with the following props:</p> <pre><code>import React from 'react';\n\nfunction PropExample(props) {\n\n  const { user, system } = props.data;\n  const {\n    // env\n    isDisplayMode,\n    isFunctionalMode,\n    isDevMode,\n    isProdMode,\n    // colors\n    isDayMode,\n    isNightMode,\n  } = system.state\n\n  const {\n    column,\n  } = system.setting\n\n  return &lt;p&gt;Prop Example&lt;/p&gt;\n}\n\nexport default PropExample\n\n</code></pre> <p> </p>"},{"location":"website-rcm-stamper/component-plugin/#propsdatasystemstate","title":"props.data.system.state","text":"property type meaning isDisplayMode boolean If true, it is the pretty version that is selected by the user. the developer controls the content. isFunctionalMode boolean This means the user should control the content. If this is true, it means that one of the following properties is true: isDevMode or isProdMode. isDevMode boolean This means it is in the portal being edited. isProdMode boolean It has been published and is on the front website. isDayMode boolean It means brighter colors are being selected isNightMode boolean It means darker colors are being selected <p>Tip: If display mode is on, functionality mode is off. And if functionality mode is on, display mode is off. This could have been an enum, but this would be an extra thing to remember when simplicity is the goal. So instead of being an enum, both of these properties can not be false or true at the same time, one is true and the other is false.</p> <p>Tip: If functionality mode is on, that means dev or production is on. Dev and prod mode will not be on at the same time.</p> <p>Tip: If display mode is on, than functionality, dev, and production is off. </p> <p>Tip: This data is always be available in every component you create.</p> <p> </p>"},{"location":"website-rcm-stamper/component-plugin/#propsdatasystemstate_1","title":"<code>props.data.system.state</code>","text":"Property Type Meaning isDisplayMode boolean If true, it is the pretty version selected by the user. The developer controls the content. isFunctionalMode boolean This means the user controls the content. If this is true, one of the following properties is also true: isDevMode or isProdMode. isDevMode boolean This means it is in the portal being edited. isProdMode boolean It has been published and is on the front website. isDayMode boolean It means brighter colors are being selected. isNightMode boolean It means darker colors are being selected. <p>Tip: If display mode is on, functionality mode is off, and vice versa. This could have been an enum, but simplicity is the goal. Both properties cannot be true or false at the same time; one is true, and the other is false.</p> <p>Tip: If functionality mode is on, either dev or production mode is on. Dev and prod mode will not be on at the same time.</p> <p>Tip: If display mode is on, functionality, dev, and production modes are off.</p> <p>Tip: This data will always be available in every component you create.</p> <p></p>"},{"location":"website-rcm-stamper/component-plugin/#propsdatasystemsetting","title":"<code>props.data.system.setting</code>","text":"Property Type Meaning column string It is the max width of the component for large screens. It is best to center the div with <code>margin: 0 auto</code> to ensure your website looks great on bigger screens. <p>Tip: This data will always be available in every component you create.</p> <p></p>"},{"location":"website-rcm-stamper/component-plugin/#propsdatauser","title":"<code>props.data.user</code>","text":"<p>This is the data from the left-hand menu being injected into the props. It is called <code>props.data.user</code> because the data comes from the user in the editor. Each component has a different version of this, but components can use the same data.</p> <p>Tip: The properties are not guaranteed to be there.</p> <p>Tip: The JSON file determines the structure of this object. Once you understand the pattern, it will be very simple to use.</p> <p>Tip: The designer uses TypeScript to match the type with the JSON to reduce errors.</p> <p>Tip: If you build a component that uses the same JSON property names, you can swap out components.</p> <p>Tip: Deleting a component doesn't mean you lose the user data (<code>props.data.user</code>). This allows a new upgraded component to be selected and the data transferred. Even if you delete the component first, the data will persist. You can override the property names, so try to pick unique property names per component unless you are trying to switch out components.</p> <p>Tip: One user answer per left menu JSON file per React component.</p> <p></p> <p>WebsiteRCM consists of three things working together:</p> Data Point Author The React component The programmer The left menu JSON file The programmer The answers from the left menu JSON file (user data) The business analyst <p></p>"},{"location":"website-rcm-stamper/component-plugin/#the-json-file","title":"The JSON file","text":"<p>The JSON file is built by listing the data selection options you want to see on the left-hand menu. These options are selected in a real-time environment and try to persist as long as possible, but they can be overwritten.</p> <p>The JSON defines the left hand menu in the menu property.</p> <pre><code>{\n  \"menu\": []\n}\n</code></pre>"},{"location":"website-rcm-stamper/component-plugin/#containerv1","title":"CONTAINER:V1","text":"<p>Inside the menu is an array of containers.</p> <pre><code>{\n  \"menu\": [\n    {\n      \"data\": [],\n      \"type\": \"CONTAINER:V1\",\n      \"header\": \"Notice\",\n      \"isShowing\": {\n        \"prop\": \"isNoticeShowing\"\n      }\n    },\n  ]\n}\n</code></pre> Property type Required Meaning data array true This will hold the inputs for the users type \"CONTAINER:V1\" true This is a container, this is the type for the container header string true These are the words on top of the container to help the user ID what the container is for isShowing Object.prop false This creates a switch for the user to toggle on and off the region the container is for in the component. Similar to highlighting but can also be used to turn off regions in the component. <p> </p>"},{"location":"website-rcm-stamper/component-plugin/#container-data","title":"Container data[]","text":""},{"location":"website-rcm-stamper/component-plugin/#textfieldv1","title":"TEXTFIELD:V1","text":"Property type Required Meaning prop string true This is the name of the property attached to the props.data.user object that is injected into the react component. type \"TEXTFIELD:V1\" true This is a Textfield label string false The label for the text field. placeholder string false The placeholder example text in the textfield. defaultValue string false The data loaded in the textfield. <pre><code>{\n  \"menu\": [\n    {\n      \"data\": [{\n        \"prop\": \"textFieldProp\",\n        \"type\": \"TEXTFIELD:V1\",\n        \"label\": \"Example Title\",\n        \"placeholder\": \"Example Placeholder\",\n        \"defaultValue\": \"This is default text.\"\n      }],\n      \"type\": \"CONTAINER:V1\",\n      \"header\": \"Example\",\n      \"isShowing\": {\n        \"prop\": \"isExampleShowing\"\n      }\n    },\n  ]\n}\n</code></pre> <p>What this would look like in the react component:</p> <pre><code>import React from 'react';\n\nfunction PropExample(props) {\n\n  const { user, system } = props;\n\n  return &lt;p&gt;{user.textFieldProp}&lt;/p&gt;\n}\n\nexport default PropExample\n\n\n</code></pre>"},{"location":"website-rcm-stamper/component-plugin/#link_selectionv1","title":"LINK_SELECTION:V1","text":""},{"location":"website-rcm-stamper/component-plugin/#color_selectionv1","title":"COLOR_SELECTION:V1","text":""},{"location":"website-rcm-stamper/component-plugin/#switchv1","title":"SWITCH:V1","text":""}]}